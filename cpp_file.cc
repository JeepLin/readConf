#include "cpp_file.h"
#include "printer.h"
#include <iostream>
#include <stdlib.h>
#include <stdio.h>

DEFINE_ACCESSOR(string,FileDescriptor,name)
	
void FileDescriptor::print()
{
	map<string,string>::iterator defIter;
	for(defIter= defArgStr.begin();defIter!= defArgStr.end(); defIter++)
	{
		cout<< defIter->first<< "\t"<< defIter->second<< endl;
	}
	cout<<"\n default Str==============================================\n";
	
	map<string,int>::iterator defInt;
	for(defInt= defArgInt.begin();defInt!= defArgInt.end(); defInt++)
	{
		cout<< defInt->first<< "\t"<< defInt->second<< endl;
	}
	cout<<"\n default Int==============================================\n";

	map<string,double>::iterator defDou;
	for(defDou= defArgDouble.begin();defDou!= defArgDouble.end(); defDou++)
	{
		cout<< defDou->first<< "\t"<< defDou->second<< endl;
	}
	cout<<"\n default Double==============================================\n";
}

//1 string
//2 int
//3 double
int FileDescriptor::whitchType(char *argv)
{
	if(argv== NULL)
		return -1;

	int type,pos= 0;
	int digitNum= 0;
	int pointNum= 0;
	int len= strlen(argv);

	while(pos< len)
	{
		if(isdigit(argv[pos]))
		{
			digitNum++;
		}
		else if(argv[pos]== '.')
		{
			pointNum++;
		}
		pos++;
	}
	
	//1 string
	//2 int
	//3 double
	if(digitNum== len) 
	{
		if(len== 1 || (len> 1 && argv[0]!= '0'))
			return 2;
		else
			return 1;
	}
	else if(digitNum!= 0 & pointNum== 1)
	{
		return 3;
	}
	else
	{
		return 1;
	}
}

void FileDescriptor::MessageGenerator(int argc,char **argv)
{
	if(argc==2 && argv!= NULL) 
	{
		int type= whitchType(argv[1]);
		switch(type)
		{
			case 1:
				defArgStr[argv[0]]= argv[1];
				defArg.push_back(make_pair(argv[0],type));
				break;
			case 2:
				defArgInt[argv[0]]= atoi(argv[1]);
				defArg.push_back(make_pair(argv[0],type));
				break;
			case 3:
				defArgDouble[argv[0]]= atof(argv[1]);
				defArg.push_back(make_pair(argv[0],type));
				break;
			default:
				cout<< "error args"<< endl;
				break;
		}
	}
}

void FileGenerator::GenerateHeader(Printer* printer) {
	string type[3]= {"string","int","double"};

  // Generate top of header.
  	printer->Print(
    "// Generated by the Jepp Lin. \n"
    "// header: $filename$\n"
    "\n"
    "#ifndef _$filename$_H__\n"
    "#define _$filename$_H__\n"
    "\n"
    "#include <string>\n\n"
    "using namespace std;\n"
	"class $filename$Conf {\n"
	"private:\n",
    "filename",file_->name());

	//1 string
	//2 int
	//3 double
	// Generate type and members of classes.
	for(int i= 0;i< file_->defArg.size();i++)
	{
		printer->Print("\t");
		printer->Print(type[file_->defArg[i].second- 1].c_str());
		printer->Print(
		"\t$var$;\n",
		"var",file_->defArg[i].first);
	}

	printer->Print(
	"\npublic:\n\t"
	"void $filename$Default();\n",
	"filename",file_->name());

	printer->Print("}");
}

void FileGenerator::GenerateSource(Printer* printer) {
	printer->Print(
    "// Generated by the Jepp Lin. \n"
    "// source: $filename$\n\n"
    "#include <string>\n"
    "#include \"$filename$.h\"\n\n",
    "filename",file_->name());
	
	printer->Print(
	"void $filename$Conf::$filename$Default(){\n",
	"filename",file_->name());

	char szNum[100]= {0};
	map<string,int>::iterator intIter;
	for(intIter= file_->defArgInt.begin();intIter!= file_->defArgInt.end();intIter++)
	{
		memset(szNum,0,sizeof szNum);
		sprintf(szNum,"%d",intIter->second);
		printer->Print("\t$var$= $value$;\n","var",intIter->first,"value",szNum);
	}
	
	map<string,double>::iterator douIter;
	for(douIter= file_->defArgDouble.begin();douIter!= file_->defArgDouble.end();douIter++)
	{
		memset(szNum,0,sizeof szNum);
		sprintf(szNum,"%f",douIter->second);
		printer->Print("\t$var$= $value$;\n","var",douIter->first,"value",szNum);
	}
	
	map<string,string>::iterator strIter;
	for(strIter= file_->defArgStr.begin();strIter!= file_->defArgStr.end();strIter++)
	{
		printer->Print("\t$var$= \"$value$\";\n","var",strIter->first,"value",strIter->second);
	}
	printer->Print("}");

}
